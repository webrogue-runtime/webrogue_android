plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.jetbrains.kotlin.android)
}

apply plugin: 'org.mozilla.rust-android-gradle.rust-android'

def cargoProfile = "debug"

android {
    namespace 'io.github.webrogue_runtime'
    compileSdk 34

    defaultConfig {
        applicationId "io.github.webrogue_runtime"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        externalNativeBuild {
            cmake {
                cppFlags ''
                arguments "-DCARGO_PROFILE=${cargoProfile}"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            resValue "string", "app_name", "webrogue"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            minifyEnabled false
        }
        debug {
            debuggable true
            applicationIdSuffix ".dev"
            resValue "string", "app_name", "webrogue debug"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            minifyEnabled false
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.1'
    }
    packaging {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    tasks.whenTaskAdded { task ->
        if ((task.name == 'javaPreCompileDebug' || task.name == 'javaPreCompileRelease')) {
            task.dependsOn 'cargoBuild'
        }
        if (task.name =~ "buildCMake.*" ) {
            task.dependsOn 'cargoBuild'
        }
    }
    cargo {
        pythonCommand = "python3"
        profile = cargoProfile
        module  = "src/main/rust"
        libname = "webrogue_android"
        // targets = ["arm", "x86", "arm64", "x86_64"]
        targets = ["arm64", "x86_64"]
        exec { spec, toolchain ->
//            if (toolchain.target == "armv7-linux-androideabi"
//                            || toolchain.target == "i686-linux-android") {
            spec.environment("V8_FROM_SOURCE", "1")
//            }
        }
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.22.1'
        }
    }
    defaultConfig {
        externalNativeBuild {
            cmake {
                abiFilters 'arm64-v8a', 'x86_64'
                // abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
            }
        }
    }
    applicationVariants.configureEach { variant ->
        def nativeBuildTask = "externalNativeBuild${variant.name.capitalize()}"
        tasks.named("merge${variant.name.capitalize()}Assets").configure {
            dependsOn(nativeBuildTask)
        }
        tasks.named("generate${variant.name.capitalize()}ResValues").configure {
            dependsOn(nativeBuildTask)
        }
        tasks.named("compile${variant.name.capitalize()}JavaWithJavac").configure {
            dependsOn(nativeBuildTask)
        }
        tasks.named("check${variant.name.capitalize()}DuplicateClasses").configure {
            dependsOn(nativeBuildTask)
        }
    }
}

dependencies {
    implementation libs.androidx.core.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.activity.compose
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.ui
    implementation libs.androidx.ui.graphics
    implementation libs.androidx.ui.tooling.preview
    implementation libs.androidx.material3
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation platform(libs.androidx.compose.bom)
    androidTestImplementation libs.androidx.ui.test.junit4
    debugImplementation libs.androidx.ui.tooling
    debugImplementation libs.androidx.ui.test.manifest
}